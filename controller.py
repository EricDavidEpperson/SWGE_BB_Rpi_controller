#!/usr/bin/python3

import bluepy.btle as btle
import random, smbus2, struct, time

bus = smbus2.SMBus(1)
addr = 0x20

def main():
  global bus_data, x, y
  while True:
    joystick()

def joystick():

  def connection(a):
    try:
      p = btle.Peripheral()
      p.connect("FA:48:51:02:33:88", btle.ADDR_TYPE_RANDOM)
      p.writeCharacteristic(0x000e, a[0])
      p.writeCharacteristic(0x000e, a[1])
    except Exception as e:
      print(e)

  def sound():
    sounds=[[0x00, 0x00], [0x00, 0x01], [0x00, 0x02], [0x00, 0x03], [0x00, 0x04], [0x01, 0x00], [0x01, 0x01], [0x01, 0x02], [0x02, 0x00], [0x02, 0x01], [0x02, 0x02], [0x03, 0x00], [0x04, 0x00], [0x05, 0x00], [0x05, 0x01], [0x05, 0x02], [0x05, 0x03], [0x05, 0x04], [0x06, 0x00], [0x06, 0x01], [0x06, 0x02], [0x06, 0x03], [0x06, 0x04], [0x07, 0x00]]
    d=random.choice(sounds)
    d0=struct.pack("<BBBBBBBB", 0x27, 0x42, 0x0F, 0x44, 0x44, 0x00, 0x1F, d[0])
    d1=struct.pack("<BBBBBBBB", 0x27, 0x42, 0x0F, 0x44, 0x44, 0x00, 0x18, d[1])
    return [d0, d1]

  def motor_cmd(b):
    d0=struct.pack("<BBBBBBBBBB", 0x29, 0x42, 0x05, 0x46, b[0], b[1], 0x01, 0x2c, 0x00, 0x00)
    d1=struct.pack("<BBBBBBBBBB", 0x29, 0x42, 0x05, 0x46, b[2], b[3], 0x01, 0x2c, 0x00, 0x00)
    return [d0, d1]

  def vector(x, y):
    if x < 448:
      if y < 448:
        return [0x00, 0x80, 0x01, 0xff]
      elif y < 576:
        if x < 64:
          return [0x80, 0xff, 0x01, 0xff]
        elif x < 192:
          return [0x80, 0x80, 0x01, 0x80]
        else:
          return [0x80, 0x55, 0x01, 0x55]
      else:
        return [0x80, 0x80, 0x81, 0xff]
    elif x < 576:
      if y < 64:
        return [0x00, 0xff, 0x01, 0xff]
      elif y < 192:
        return [0x00, 0xc0, 0x01, 0xc0]
      elif y < 448:
        return [0x00, 0x80, 0x01, 0x80]
      elif y < 576:
        return [0x00, 0x00, 0x01, 0x00]
      elif y < 832:
        return [0x80, 0x80, 0x81, 0x80]
      elif y < 960:
        return [0x80, 0xc0, 0x81, 0xc0]
      else:
        return [0x80, 0xff, 0x81, 0xff]
    else:
      if y < 448:
        return [0x00, 0xff, 0x01, 80]
      elif y < 576:
        if x < 832:
          return [0x00, 0x55, 0x81, 0x55]
        elif x < 960:
          return [0x00, 0x80, 0x81, 0x80]
        else:
          return [0x00, 0xff, 0x81, 0xff]
      else:
        return [0x80, 0xff, 0x81, 0x80]

  global bus_data, x, y
  bus_data = bus.read_i2c_block_data(addr, 0x03, 5)
  x = (bus_data[0]<<8 | bus_data[1])>>6
  y = (bus_data[2]<<8 | bus_data[3])>>6
  bttn = bus_data[4]
  if bttn == 0:
    a = sound()
  else:
    b = vector(x, y)
    a = motor_cmd(b)
  connection(a)
  time.sleep(.05)

if __name__ == '__main__':
    main()
